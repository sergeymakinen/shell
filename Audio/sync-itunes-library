#!/usr/bin/env pypy3

import os
import subprocess

from sergeymakinen import shell_utils


class SyncClient(object):
    JS = {
        'add': '''
ObjC.import('stdlib');

function run(argv) {
    Application('iTunes').add(Path(argv[0]));
    $.exit(0);
}
        ''',
        'clean': '''
ObjC.import('stdlib');
ObjC.import('stdio');

function run() {
    var tracks = Application('iTunes').sources.libraryPlaylists[0].fileTracks;
    var tracksRemoved = 0;
    var tracksLeft = tracks.length;
    while (tracksLeft > 0) {
        tracksLeft--;
        if (tracks[tracksLeft].location() === null) {
            tracks[tracksLeft].delete();
            tracksRemoved++;
        }
    }
    $.printf(tracksRemoved);
    $.exit(0);
}
        ''',
        'list': '''
ObjC.import('stdlib');
ObjC.import('stdio');

function run() {
    var iTunes = Application('iTunes');
    var tracks = iTunes.sources.libraryPlaylists[0].fileTracks;
    for (var index = 0, length = tracks.length; index < length; index++) {
        var location = tracks[index].location();
        if (location === null) {
            continue;
        }
        
        ObjC.bindFunction('printf', ['int', ['string']]);
        $.printf(location);
        ObjC.bindFunction('printf', ['int', ['string', 'int']]);
        $.printf('%c', 0);
    }
    $.exit(0);
}
        '''
    }
    
    def __init__(self, library_path, logger=None):
        self._library_path = library_path
        self._logger = logger
        self._osascript_path = shell_utils.find_executable('osascript')
        pass

    def sync(self):
        self._clean()
        try:
            files = self._exec('list')
        except OSError as e:
            self._log_exception('syncing', self._library_path, 'subprocess.Popen', e)
            return

        files = set(path.lower() for path in files.rstrip('\0').split('\0'))
        self._sync(self._library_path, files)

    def _clean(self):
        try:
            cleaned = self._exec('clean')
        except OSError as e:
            self._log_exception('cleaning', None, 'subprocess.Popen', e)
            return

        try:
            cleaned = int(cleaned)
        except ValueError as e:
            self._log_exception('cleaning', None, 'int', e)
            return

        if cleaned > 0:
            if cleaned == 1:
                self._log('Cleaning removed 1 file')
            else:
                self._log('Cleaning removed {0} files'.format(cleaned))

    def _exec(self, name, args=None):
        """
        :param str name:
        :param list args:
        :rtype: str
        """

        cmd = [self._osascript_path, '-l', 'JavaScript', '-']
        if args is not None:
            cmd += args
        return subprocess.Popen(cmd, universal_newlines=True,
                                stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate(self.JS[name])[0]

    def _log(self, message):
        if callable(self._logger):
            self._logger(message)

    def _log_exception(self, operation, path, caller, exception):
        if isinstance(exception, (OSError, IOError)):
            message = "code = {0}, message = '{1}'".format(exception.errno, exception.strerror)
        elif isinstance(exception, subprocess.CalledProcessError):
            message = "code = {0}, command = '{1}'".format(exception.returncode, exception.cmd)
        else:
            message = str(exception)
        if path is not None:
            path = " '{0}'".format(path)
        else:
            path = ''

        self._log("Skipped {0}{1}: {2}() raised {3}: {4}".format(operation, path,
                                                                 caller, type(exception).__name__, message))

    def _sync(self, path, files):
        try:
            entries = os.listdir(path)
        except OSError as e:
            self._log_exception('syncing', path, 'os.listdir', e)
            return

        for entry in entries:
            entry_path = os.path.join(path, entry)
            if os.path.isdir(entry_path):
                self._sync(entry_path, files)
            else:
                if not entry.lower().endswith(('.mp3', '.m4a')) or entry_path.lower() in files:
                    continue

                self._exec('add', [entry_path])
                self._log("Added '{0}'".format(entry_path))

params = shell_utils.import_config()['__global__']
params['LIBRARY_PATH'] = shell_utils.realpath(params['LIBRARY_PATH'])
if not os.path.isdir(params['LIBRARY_PATH']):
    shell_utils.error("No library directory '{0}'".format(params['LIBRARY_PATH']))

params['LOG_PATH'] = shell_utils.realpath(params['LOG_PATH'])
if not os.path.isdir(params['LOG_PATH']):
    os.mkdir(params['LOG_PATH'])
log_file = os.path.join(params['LOG_PATH'], shell_utils.strftime('%Y-%m-%dT%H-%M-%S%z.log'))
shell_utils.touch(log_file)

sync_client = SyncClient(params['LIBRARY_PATH'],
                         logger=lambda message: shell_utils.log(log_file, message))
sync_client.sync()
