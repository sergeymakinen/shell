#!/usr/bin/env pypy3

#
# Parameters
#

LOSSLESS_PATH = r'/Volumes/Archive/Audio/Music'

LOSSY_PATH = r'~/Lossy Music'

LOG_PATH = r'~/Library/Logs/com.sergeyreznikov.SyncLossyLibrary'

EXTENSIONS = [
    'mp3',
    ('m4a', 'ALAC')
]

ENCODE_COMMAND = r'/Applications/XLD.app/Contents/MacOS/XLD --cmdline --profile Lossy -o :lossy_file_path :lossless_file_path'

MEDIAINFO_FILE_PATH = r'mediainfo'

#
#
#

import os
import posixpath
import shlex
import shutil
import subprocess

from sergeymakinen import shell_utils


class ComplexError(Exception):
    def __init__(self, caller, exception):
        self.caller = caller
        self.inner_exception = exception

    def __str__(self):
        return str(self.inner_exception)


class SyncClient(object):
    @staticmethod
    def _copy_times(lossless_path, lossy_path):
        try:
            stat = os.stat(lossless_path)
        except OSError as e:
            raise ComplexError('os.stat', e)

        try:
            os.utime(lossy_path, (stat.st_atime, stat.st_mtime))
        except OSError as e:
            raise ComplexError('os.utime', e)

    def __init__(self, lossless_path, lossy_path, extensions, encode_cmd, mediainfo_file_path, logger=None):
        self._lossless_path = lossless_path
        self._lossy_path = lossy_path
        self._exts = tuple(['.' + (ext[0] if isinstance(ext, tuple) else ext).lower() for ext in extensions])
        self._encode_cmd = encode_cmd
        self._mi_file_path = mediainfo_file_path
        self._formats = {'.' + ext[0].lower(): ext[1] for ext in extensions if isinstance(ext, tuple)}
        self._logger = logger

    def sync(self):
        self._clean()
        self._sync()

    def _log(self, message):
        if callable(self._logger):
            self._logger(message)

    def _log_exception(self, operation, path, caller, exception):
        if isinstance(exception, (OSError, IOError)):
            message = "code = {0}, message = '{1}'".format(exception.errno, exception.strerror)
        elif isinstance(exception, subprocess.CalledProcessError):
            message = "code = {0}, command = '{1}'".format(exception.returncode, exception.cmd)
        else:
            message = str(exception)

        self._log("Skipped {0} '{1}': {2}() raised {3}: {4}".format(operation, path,
                                                                    caller, type(exception).__name__, message))

    def _log_clean_exception(self, path, caller, exception):
        self._log_exception('cleaning', path, caller, exception)

    def _log_sync_exception(self, path, caller, exception):
        self._log_exception('syncing', path, caller, exception)

    def _clean(self, rel_path='/'):
        lossy_path = self._lossy_path
        lossless_path = self._lossless_path
        if rel_path != '/':
            norm_rel_path = os.path.normpath(rel_path.lstrip('/'))
            lossy_path = os.path.join(lossy_path, norm_rel_path)
            lossless_path = os.path.join(lossless_path, norm_rel_path)
        if not os.path.isdir(lossless_path):
            try:
                shutil.rmtree(lossy_path)
            except OSError as e:
                self._log_clean_exception(rel_path, 'shutil.rmtree', e)
                return

            self._log("Removed '{0}'".format(rel_path))
            return

        try:
            entries = os.listdir(lossy_path)
        except OSError as e:
            self._log_clean_exception(rel_path, 'os.listdir', e)
            return

        for entry in entries:
            rel_entry_path = posixpath.join(rel_path, entry)
            entry_lossy_path = os.path.join(lossy_path, entry)
            entry_lossless_path = os.path.join(lossless_path, entry)

            if os.path.isdir(entry_lossy_path):
                self._clean(rel_entry_path)
            else:
                if not os.path.isfile(entry_lossless_path):
                    try:
                        os.unlink(entry_lossy_path)
                    except OSError as e:
                        self._log_clean_exception(rel_entry_path, 'os.unlink', e)
                        continue

                    self._log("Removed '{0}'".format(rel_entry_path))

    def _compare_files(self, lossless_path, lossy_path):
        def _requires_encoding():
            ext = os.path.splitext(lossless_path)[1].lower()
            if ext not in self._formats:
                return False

            try:
                return subprocess.Popen([self._mi_file_path, '--Inform=Audio;%Format%', lossless_path],
                                        stdout=subprocess.PIPE).communicate()[0].rstrip() == self._formats[ext]
            except OSError as e:
                raise ComplexError('subprocess.Popen', e)

        if not os.path.isfile(lossy_path):
            return False, _requires_encoding()

        try:
            lossless_modified = os.path.getmtime(lossless_path)
            lossy_modified = os.path.getmtime(lossy_path)
        except OSError as e:
            raise ComplexError('os.path.getmtime', e)

        if lossless_modified != lossy_modified:
            return False, _requires_encoding()

        if _requires_encoding():
            return True, True
        else:
            try:
                lossless_size = os.path.getsize(lossless_path)
                lossy_size = os.path.getsize(lossy_path)
            except OSError as e:
                raise ComplexError('os.path.getsize', e)

            return lossless_size == lossy_size, False

    def _sync(self, rel_path='/'):
        lossless_path = self._lossless_path
        lossy_path = self._lossy_path

        if rel_path != '/':
            norm_rel_path = os.path.normpath(rel_path.lstrip('/'))
            lossless_path = os.path.join(lossless_path, norm_rel_path)
            lossy_path = os.path.join(lossy_path, norm_rel_path)

        try:
            entries = os.listdir(lossless_path)
        except OSError as e:
            self._log_sync_exception(rel_path, 'os.listdir', e)
            return

        for entry in entries:
            rel_entry_path = posixpath.join(rel_path, entry)
            entry_lossless_path = os.path.join(lossless_path, entry)
            entry_lossy_path = os.path.join(lossy_path, entry)

            if os.path.isdir(entry_lossless_path):
                self._sync(rel_entry_path)
            else:
                if not entry.lower().endswith(self._exts):
                    continue

                try:
                    intact, requires_encoding = self._compare_files(entry_lossless_path, entry_lossy_path)
                except ComplexError as e:
                    self._log_sync_exception(rel_entry_path,
                                             e.caller + '() in SyncClient._compare_files', e.inner_exception)
                    continue

                if not intact:
                    if not os.path.isdir(lossy_path):
                        try:
                            os.makedirs(lossy_path)
                        except OSError as e:
                            self._log_sync_exception(rel_entry_path, 'os.makedirs', e)
                            continue

                    if requires_encoding:
                        cmd = []
                        for arg in self._encode_cmd:
                            if arg == ':lossless_file_path':
                                cmd.append(entry_lossless_path)
                            elif arg == ':lossy_file_path':
                                cmd.append(entry_lossy_path)
                            else:
                                cmd.append(arg)
                        try:
                            subprocess.check_call(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                        except (OSError, subprocess.CalledProcessError, IndexError) as e:
                            self._log_exception('encoding', rel_entry_path, 'subprocess.check_call', e)
                            continue

                        self._log("Encoded '{0}'".format(rel_entry_path))
                    else:
                        try:
                            shutil.copyfile(entry_lossless_path, entry_lossy_path)
                        except (IOError, shutil.Error) as e:
                            self._log_exception('copying', rel_entry_path, 'shutil.copyfile', e)
                            continue

                        self._log("Copied '{0}'".format(rel_entry_path))
                    try:
                        SyncClient._copy_times(entry_lossless_path, entry_lossy_path)
                    except ComplexError as e:
                        self._log_exception('copying times for', rel_entry_path,
                                            e.caller + '() in SyncClient._copy_times', e.inner_exception)

params = shell_utils.import_config()['__global__']
params['LOSSLESS_PATH'] = shell_utils.realpath(params['LOSSLESS_PATH'])
if not os.path.isdir(params['LOSSLESS_PATH']):
    shell_utils.error("No lossless directory '{0}'".format(params['LOSSLESS_PATH']))

params['LOSSY_PATH'] = shell_utils.realpath(params['LOSSY_PATH'])
if not os.path.isdir(params['LOSSY_PATH']):
    shell_utils.error("No lossy directory '{0}'".format(params['LOSSY_PATH']))

encode_cmd = shlex.split(params['ENCODE_COMMAND'])
if len(encode_cmd) > 0:
    encode_cmd[0] = shell_utils.realpath(encode_cmd[0], True)
params['EXTENSIONS'] = [ext.strip() if ext.find(',') == -1 else tuple(option.strip() for option in ext.split(',')) for ext in params['EXTENSIONS'].split('\n')]
shell_utils.error(repr(params))
params['MEDIAINFO_FILE_PATH'] = shell_utils.realpath(params['MEDIAINFO_FILE_PATH'], True)
params['LOG_PATH'] = shell_utils.realpath(params['LOG_PATH'])
if not os.path.isdir(params['LOG_PATH']):
    os.mkdir(params['LOG_PATH'])
log_file = os.path.join(params['LOG_PATH'], shell_utils.strftime('%Y-%m-%dT%H-%M-%S%z.log'))
shell_utils.touch(log_file)

sync_client = SyncClient(params['LOSSLESS_PATH'], params['LOSSY_PATH'],
                         params['EXTENSIONS'], encode_cmd, params['MEDIAINFO_FILE_PATH'],
                         logger=lambda message: shell_utils.log(log_file, message))
sync_client.sync()
